#!/bin/python3

import io
import subprocess
from dataclasses import dataclass, field
import sys


N_INODES = 1008
N_BLOCKS = 4096
INODE_SIZE = 32


def fill(n: int) -> bytes:
    return int(0).to_bytes(n)

def no(*_):
    cmd = ['cp', '/dev/null', '.bin/.tmp']
    subprocess.run(cmd)

def dr(_, inode, parent):
    with open('.bin/.tmp', 'wb') as f:
        f.write(parent.to_bytes(2) + b'..' + fill(12))
        f.write(inode.to_bytes(2) + b'.' + fill(13))

def df(name, *_):
    cmd = [
        'ras', '-o', '.bin/.tmp',
        '-D.=4096',
        '-S.text', '-S.data', '-S.bss',
        'config.s',
        f'cmd/{name}.s'
    ]
    subprocess.run(cmd)

def mu(*_):
    cmd = [
        'ras', '-o', '.bin/.tmp',
        '-S.init', '-S.text', '-S.data',
        '-S.tests',
        '-S.bss', '-Lbss', '-S.end', '-Lend',
        '-s', '.bin/syms',
        'config.s',
        'syscalls.s',
        'mu/init.s',
        'mu/proc.s',
        'mu/sched.s',
        'mu/syscall.s',
        'mu/sys.s',
        'mu/fs/fp.s',
        'mu/fs/namei.s',
        'mu/drv/rs.s',
        'mu/drv/buf.s',
        'mu/drv/tty.s',
        'mu/drv/con.s',
        'mu/drv/key.s',
        'mu/drv/mm.s',
        'mu/drv/usb.s',
        'mu/drv/pci.s',
        'mu/tests.s'
    ]
    subprocess.run(cmd)


files = [
    ('',              '----drw-', dr),
    ('/bin',          '----drw-', dr),
    ('/dev',          '----drw-', dr),
    ('/etc',          '----drw-', dr),
    ('/bin/ls',       '-----rwx', df),
    ('/dev/null',     '-----rw-', no, 1),
    ('/dev/tty',      '-----rw-', no, 2),
    ('/dev/stty1',    '-----rw-', no, 3),
    ('/dev/stty2',    '-----rw-', no, 4),
    ('/dev/kb',       '-----r--', no, 5),
    ('/etc/coredump', '-----rw-', no, 8),
    ('/etc/init',     '-----rw-', df, 10),
    ('/etc/boot',     '-----rw-', df, None, 0),
    ('/etc/mu',       '-----rw-', mu, 9),
]

INODE = 11
BLOCK = 1 + N_INODES * INODE_SIZE // 512


def expand(t: tuple, n: int) -> tuple:
    return tuple(t[i] if i < len(t) else None for i in range(n))

def calc_flags(flags: str) -> int:
    n = 0
    for c in flags:
        match c:
            case 'a': n |= 0x80
            case 'd': n |= 0x08
            case 'r': n |= 0x04
            case 'w': n |= 0x02
            case 'x': n |= 0x01
    return n

@dataclass
class Inode:
    number: int
    flags: int
    links: int = 1
    xzone: int = 0xffff
    ctime: int = 0
    size: int = 0
    zones: list[int] = field(default_factory=lambda: [None for i in range(10)])

    def write(self, buffer: bytes):
        global BLOCK
        zone = self.zones[self.size // 512]
        if zone is None:
            zone, self.zones[self.size // 512] = BLOCK, BLOCK
            BLOCK += 1
        self.size += len(buffer)
        disk[zone].write(buffer)


inodes: dict[str, Inode] = {}
disk: list[io.BytesIO] = [io.BytesIO() for _ in range(N_BLOCKS)]

# process files
for file in files:
    path, flags, func, inode, block = expand(file, 5)
    if inode is None:
        inode = INODE
        INODE += 1
    flags = calc_flags(flags)
    parent, _, name = path.rpartition('/')
    this = Inode(inode, flags)
    inodes[path] = this
    this.zones[0] = block
    parent = inodes[parent]
    func(name, inode, parent.number)
    if name:
        parent.write(inode.to_bytes(2, byteorder='little') + name.encode() + fill(14 - len(name)))
        parent.links += 1
    with open('.bin/.tmp', 'rb') as f:
        while buffer := f.read(512):
            this.write(buffer)

# configure boot
disk[0].write(fill(400 - len(disk[0].getvalue())))
disk[0].write(((inodes['/etc/mu'].size + 3) // 2).to_bytes(2, byteorder='little'))
for z in inodes['/etc/mu'].zones:
    disk[0].write((z or 0xffff).to_bytes(2, byteorder='little'))
disk[0].write(int(0xffff).to_bytes(2, byteorder='little'))
disk[0].write(int(BLOCK).to_bytes(2, byteorder='little'))
disk[0].write(int(INODE).to_bytes(2, byteorder='little'))
disk[0].write(int(N_BLOCKS - BLOCK).to_bytes(2, byteorder='little'))
disk[0].write(int(N_INODES - INODE).to_bytes(2, byteorder='little'))
disk[0].seek(510)
disk[0].write(int(0xaa55).to_bytes(2, byteorder='little'))

# flush inodes
for inode in inodes.values():
    if inode.number < 16:
        continue
    inode.number -= 16
    zone = disk[1 + inode.number * INODE_SIZE // 512]
    zone.seek(inode.number * INODE_SIZE % 512)
    zone.write(inode.flags.to_bytes(1, byteorder='little') + inode.links.to_bytes(1, byteorder='little'))
    zone.write(inode.xzone.to_bytes(2, byteorder='little'))
    zone.write(inode.size.to_bytes(4, byteorder='little'))
    zone.write(inode.ctime.to_bytes(4, byteorder='little'))
    for z in inode.zones:
        z = z or 0xffff
        zone.write(z.to_bytes(2, byteorder='little'))

with open(sys.argv[1], 'wb') as f:
    for zone in disk:
        b = zone.getvalue()
        f.write(b + fill(512 - len(b)))
